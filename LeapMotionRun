import Leap, sys, time, ctypes, numpy
from PIL import Image
import tensorflow as tf


class SampleListener(Leap.Listener):
    def __init__(self):
        super().__init__()

    def on_init(self, controller):
        print("Initialized")
        self.model = self.create_vgg16()
        self.model.load_weights('model_vgg4.h5')

    def on_connect(self, controller):
        print("Connected")

    def on_disconnect(self, controller):
        print("Disconnected")

    def on_exit(self, controller):
        print("Exited")

    def on_frame(self, controller):
        frame = controller.frame()
        if frame.id % 1 == 0:
            hands = frame.hands
            numHands = len(hands)
            print("Frame id: %d, timestamp: %d, hands: %d, fingers: %d, tools: %d" % (
                frame.id, frame.timestamp, numHands, len(frame.fingers), len(frame.tools)))
            if numHands > 0 and len(frame.fingers) > 0:
                image = self.get_image(controller)
                print(self.test_image(image))
                # ovaj sleep je samo da se vidi kad ispise simbol
                time.sleep(3)

    def create_vgg16(self):
        base_model = tf.keras.applications.vgg16.VGG16(input_shape=(120, 320, 3),  # Shape of our images
                                                       include_top=False,  # Leave out the last fully connected layer
                                                       weights='imagenet')
        for layer in base_model.layers:
            layer.trainable = False
        x = tf.keras.layers.Flatten()(base_model.output)

        # Add a fully connected layer with 512 hidden units and ReLU activation
        x = tf.keras.layers.Dense(512, activation='relu',
                                  kernel_regularizer=tf.keras.regularizers.l1_l2(l1=1e-5, l2=1e-4))(x)

        # Add a dropout rate of 0.5
        x = tf.keras.layers.Dropout(0.2)(x)

        # Add a final sigmoid layer with 1 node for classification output
        x = tf.keras.layers.Dense(4, activation='sigmoid',
                                  kernel_regularizer=tf.keras.regularizers.l1_l2(l1=1e-5, l2=1e-4))(x)

        model = tf.keras.models.Model(base_model.input, x)
        model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.0001), loss='binary_crossentropy',
                      metrics=['acc'])

        return model

    def get_image(self, controller):
        image_list = controller.frame().images
        left_image = image_list[0]
        right_image = image_list[1]
        image_buffer_ptr = left_image.data_pointer
        ctype_array_def = ctypes.c_ubyte * left_image.width * left_image.height
        as_ctype_array = ctype_array_def.from_address(int(image_buffer_ptr))
        image_numpy_first = numpy.ctypeslib.as_array(as_ctype_array)

        return image_numpy_first

    def test_image(self, image):
        img = Image.fromarray(image).convert('L')
        img = img.resize((320, 120))
        arr = numpy.array(img)
        arr = numpy.tile(arr[:, :, None], [1, 1, 3])
        arr = arr / 255
        arr = numpy.expand_dims(arr, axis=0)

        start_time = time.time()
        b = self.model.predict(arr)
        end_time = time.time()
        print("Vreme prolaska jedne slike kroz mrezu  je: " + str(end_time - start_time) + "s")

        action = numpy.argmax(b)
        vector = ['sklopljena pesnica', 'otvorena šaka', 'L simbol', 'vertikalna šaka']
        return (vector[action])


def main():
    listener = SampleListener()
    controller = Leap.Controller()
    controller.set_policy(Leap.Controller.POLICY_IMAGES)
    # Have the sample listener receive events from the controller
    controller.add_listener(listener)

    # Keep this process running until Enter is pressed
    print("Press Enter to quit...")
    try:
        sys.stdin.readline()
    except KeyboardInterrupt:
        pass

    # Remove the sample listener when done
    controller.remove_listener(listener)


if __name__ == "__main__":
    main()
